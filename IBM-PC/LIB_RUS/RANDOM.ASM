;8-Бит Чаепитие! Лицензия: Creative Commons.
;Платформа: 8086, VGA(64kb), BIOS.
;Инструменты: NASM(2.15).
;Модули: system.asm.
;Авторы: Александр Серов (funny.dreamy.cat@gmail.com) [1].
;Быстродействие: около 200 тактов, в не зависимости от входных параметров.
;Память: 54 код и 4 байта данных.

CPU 8086                                ;Директива ассемблера, изменить.

RANDOM_INIT     EQU 01AF0h              ;Первоначальные данные для теста.

        org 100h                        ;Минимальный COM-файл.
        pushf                           ;Сохраним хотя бы флаги.
        mov ax,0013h                    ;Устанавливаем стандартный режим 13h,
        int 10h                         ;320*200*256 цветов, через БИОС.
        xor cx,cx                       ;Счетчик последовательности 64К.
        mov ax,0A000h                   ;Инициализация сегментного адреса
        mov es,ax                       ;видеобуфера в регистр ES.
        mov ax,RANDOM_INIT              ;Начальное значение, любое, кроме 0.
        call near RandomSimple          ;Инициализация последовательности.
R1:     xor ax,ax                       ;Обнуляем акк. для получения
        call near RandomSimple          ;псевдослучайного числа.
        cmp ax,64000                    ;Немного подстрахуемся на переполнение
        jnc short R1                    ;буфера экрана.
        mov di,ax                       ;Используем простое линейное смещение.
        mov byte es:[di],0Fh            ;Ставим стандартную точку цветом 15.
        loop R1                         ;Замыкаем основной цикл.
        mov ah,00h                      ;Ожидаем нажатия любой клавиши
        int 16h
        popf                            ;Восстанавливаем флаги и выходим.
        ret

; Процедура генерации псевдослучайной последовательности 16-ти битных чисел,
;работает линейно по производительности и использует дополнительно 32 бита
;данных для сохранения текущего состояния последовательности.
; Вход:
;AX     если не нуль, то инициализация последовательности значением регистра.
; Выход:
;AX     псевдослучайное значение последовательности.

random_seed:    dd 00000000h            ;Данные для вычисления, сохраняются.

RandomSimple:
        pushf                           ;Сохраняем флаги и активные регистры.
        push cx
        push dx
        test ax,ax                      ;Проверяем, если требуется
        jz short RndSim0                ;инициализация данных, значением в AX.
        mov [random_seed],ax            ;Сохраняем начальные данные для
        not ax                          ;дальнейших расчетов и улучшения
        mov [random_seed+02h],ax        ;последовательности, распределения.
RndSim0:mov ax,[random_seed]            ;Загружаем данные предыдущего
        mov dx,[random_seed+02h]        ;значения последовательности, 32 бита.
        mov cx,ax
        not cx                          ;Цепляемся смещением за последние 4
        xor cl,ch                       ;бита предыдущего значения.
        and cl,00001111b                ;Не более 16-ти циклических сдвигов в
        ror ax,cl                       ;любом направлении.
        ror dx,cl
        add ax,dx                       ;Три сложения младшей и старших частей
        add ax,cx                       ;по 16-ть бит, с учетом смещения от
        add dx,ax                       ;0 до 15, по младшим 4 битам.
        xor dx,cx                       ;Простой XOR для разнообразия битов.
        mov [random_seed],ax            ;Сохраняем текущие данные для
        mov [random_seed+002h],dx       ;следующего вызова.
        pop dx
        pop cx                          ;Восстанавливаем регистры и флаги.
        popf
        ret                             ;Регистр AX содержит результат.

;09.10.21 [1]: Добавлено описание и демонстрация работы в видеорежиме 13h.
;02.10.21 [1]: Первая версия простого генератора псевдослучайных чисел.
