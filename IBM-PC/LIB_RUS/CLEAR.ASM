;8-Бит Чаепитие! Лицензия: Creative Commons.
;Платформа: 8086, BIOS, CGA+.
;Инструменты: NASM(2.15).
;Модули: system.asm, screen.asm.
;Авторы: Даниил Потапов (danilzatruda23@gmail.com) [1],
;        Александр Серов (funny.dreamy.cat@gmail.com) [2].
;Быстродействие: минимальное со всеми сброшеными флагами 181 такта;
;                максимальное с флагами и разрешением 80*50, 240210 тактов;
;                для разрешения 80*25, 120210 тактов;
;                для разрешения 40*25, 60210 тактов.
;Память: 64 байт кода и 4 байта глобальных системных данных.

; Задачи:
; - обновить полностью с учетом модулей и пересмотреть включения и имена;
; - дополнить функционал с учетом всех страниц видеоадаптера;
; - удалить сброс курсора, когда появится процедуры управления курсором;
; - подумать о дополнении демонстрации, процедурой печати и комментариями;
; - подумать о переносе флагов настройки в регистр CH как и в других модулях;
; - добавить кадры и вынести их в графический gif-файл демонстрации.

CPU 8086

        org 00100h                      ;Смещение для файла типа .COM.
Demo:   pushf                           ;Сохраняем флаги для корректности.

; Первая очистка или заполнение экрана атрибутаыми, т.е. если присутствует
;какой-либо текст, то он должен остаться неизменным, а фон полностью обновлен.

        mov ah,00011111b                ;Синий фон и яркие символы.
        mov al,02Eh                     ;Точка как параметр.
        mov dl,00000010b                ;Только фон как флаг.
        call near ClearScreen
        mov bx,ax                       ;Сохраняем значение и ожидаем клавиши.
        xor ah,ah
        int 16h

; Вторая очистка, заполнение всего экрана только символами, без атрибутов.

        mov ax,bx                       ;Возвращаем начальные значения.
        mov dl,00000001b                ;Только символ как флаг.
        call near ClearScreen
        mov bx,ax
        xor ah,ah                       ;Сохраняем значение и ожидаем клавиши.
        int 16h

; Тестирование только сброса координат курсора, проверка через отладчик, после
;добавление процедур управления курсором, удалить этот тест.

        mov ax,bx
        mov [scr_cursor_x],al           ;Записываем произвольные параметры как
        mov [scr_cursor_y],ah           ;координаты.
        mov dl,00000100b                ;Только флаг как курсор.
        mov ax,00001h
        call near ClearScreen
        mov al,[scr_cursor_x]           ;Проверка для отладчика.
        mov ah,[scr_cursor_y]

; Тестирование всех возможных параметров фона и текста, бит мерцания выключен
;принудительно если был включен, совместимость с IBM-AT.

        mov ax,01003h                   ;Установка палитры без мерцания.
        xor bl,bl
        int 10h
        mov cx,00010h                   ;Счетчик на все 16 цветов.
        mov al,'A'                      ;Начальный символ А или любой другой.
        mov ah,00001111b                ;Чёрный фон и яркокрасные буквы.
        mov dl,00000011b                ;Фон и текст.
ClrPrt: call near ClearScreen
        push ax                         ;Сохраняем регистры и вызываем
        push cx                         ;процедуру ожидания в милисекундах.
        push dx
        mov cx,00Fh
        mov dx,0A120h                   ;Подумать над совместимостью IBM-PC,
        mov ah,086h                     ;т.к. эта функция доступна с IBM-AT.
        int 15h                         ;Ожидание 7A120 (500.000) миллисекунд.
        pop dx
        pop cx
        pop ax
        inc al                          ;Следующий символ.
        mov bh,ah
        mov bl,cl
        mov cl,4
        shr bh,cl                       ;Смещаем биты цвета фона для удобства и
        inc bh                          ;увеличиваем индекс с возвратом.
        shl bh,cl
        and ah,00001111b                ;Маской выделяем только цвет чернил и
        dec ah                          ;уменьшаем индекс на единицу.
        or bh,ah
        mov ah,bh                       ;Смешиваем биты фона и текста и
        mov cl,bl                       ;повторяем цикл пока не нуль.
        loop ClrPrt
Demo0:  xor ah,ah                       ;Ожидаем клавиши и выходим.
        int 16h
        popf
        ret

; Процедура очистки текстового буфера экрана. Все параметры режима являются
;внешними переменными. Переменные вынести в системный файл. Дополнительно,
;возможен сброс координат нашего курсора.
; Вход:
;AH     атрибут символа по формату текстового экрана;
;AL     символ для заполнения, стандартный ASCII;
;DL     битовые флаги дополнительных настроек:
;0      использовать ли символы для заполнения экрана;
;1      использовать ли атрибут при очистки экрана;
;2      сбросить в нули или в начало координат(0,0) наш курсор.
;3-7    резерв.
; Выход: заполнение буфера экрана с учетом настроек(первая страница).

ClearScreen:
        pushf                           ;Сохраняем регистр флагов в стек, а
        push cx                         ;также используемые регистры СХ,DI,ES.
        push di
        push es
        mov cx,[scr_size_word]          ;Загружаем в СХ размер экрана в словах.
        mov di,SCR_ADDRESS              ;Загружаем в ES:DI адрес видеобуфера
        mov es,di                       ;экрана. В ES сегментный адрес, а
        xor di,di                       ;в DI нулевое смещение начала экрана.
        cld                             ;Сбрасываем флаг направления DF(+1).
        test dl,00000001b               ;Бит 0, заполнять-ли экран символами,
        jz short ClrScr1                ;если нет, то проверяем флаг атрибутов.
ClrScr2:stosb                           ;Записываем символ из AL в видеобуфер.
        inc di                          ;Пропускаем байт атрибута, смещение
        loop ClrScr2                    ;на следующий символ и повторяем цикл.
        mov cx,[scr_size_word]          ;Снова в CX размер экрана в словах и
        xor di,di                       ;устанавливаем смещение DI в начало.
ClrScr1:test dl,00000010b               ;Бит 1, заполнять-ли экран атрибутами,
        jz short ClrScr3                ;если нет, то к проверке сброса курсора.
        xchg al,ah                      ;AL содержит атрибут, а AH - символ.
ClrScr4:inc di                          ;Пропускаем символ, увеличивая DI на 1.
        stosb                           ;Записываем байт из AL в видеобуфер и
        loop ClrScr4                    ;повторяем цикл заполения видеобуфера.
        xchg al,ah                      ;Восстанавливаем исходное значение AX.
ClrScr3:test dl,00000100b               ;Проверяем бит сброса курсора в DL.
        jz short ClrScr0
        xor cl,cl                       ;Если бит установлен, то сбрасываем наш
        mov [scr_cursor_x],cl           ;курсор в начальные координаты X:Y(0,0).
        mov [scr_cursor_y],cl
ClrScr0:pop es                          ;Восстанавливаем регистры ES, DI, CX из
        pop di                          ;стека. Также регистр флагов и
        pop cx                          ;возвращаем управление в код вызова.
        popf
        ret

; Глобальные данные с предустановками временно в этом файле, после в system.asm.

SCR_ADDRESS             EQU 0B800H      ;Адрес буфера экрана CGA+.
SCR_SIZE_BYTE           EQU 00FA0H      ;Размер экрана(страницы) в байтах.
SCR_SIZE_WORD           EQU 007D0H      ;Размер экрана(страницы) в словах.

scr_cursor_x    db 000h
scr_cursor_y    db 000h
scr_size_word   dw SCR_SIZE_WORD
scr_size_byte   dw SCR_SIZE_BYTE

;22.03.25 [1,2]: Первая версия и демонстрация, дополнена сбросом нашего курсора.
;17.03.25 [1,2]: Первая версия черновика с отваленным вещанием и дополнением.
